using Content.Shared._Gardenstation.DionaMirror;
using Content.Shared.Humanoid.Markings;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._Gardenstation.DionaMirror;

[GenerateTypedNameReferences]
public sealed partial class DionaMirrorWindow : DefaultWindow
{
    // MMMMMMM

    public Action<(int slot, string id)>? OnFaceSelected;
    public Action<(int slot, Marking marking)>? OnFaceColorChanged;
    public Action<int>? OnFaceSlotRemoved;
    public Action? OnFaceSlotAdded;

    public Action<(int slot, string id)>? OnHeadSelected;
    public Action<(int slot, Marking marking)>? OnHeadColorChanged;
    public Action<int>? OnHeadSlotRemoved;
    public Action? OnHeadSlotAdded;

    public Action<(int slot, string id)>? OnHeadTopSelected;
    public Action<(int slot, Marking marking)>? OnHeadTopColorChanged;
    public Action<int>? OnHeadTopSlotRemoved;
    public Action? OnHeadTopSlotAdded;

    public Action<(int slot, string id)>? OnHeadSideSelected;
    public Action<(int slot, Marking marking)>? OnHeadSideColorChanged;
    public Action<int>? OnHeadSideSlotRemoved;
    public Action? OnHeadSideSlotAdded;

    public Action<(int slot, string id)>? OnOverlaySelected;
    public Action<(int slot, Marking marking)>? OnOverlayColorChanged;
    public Action<int>? OnOverlaySlotRemoved;
    public Action? OnOverlaySlotAdded;

    public DionaMirrorWindow()
    {
        RobustXamlLoader.Load(this);

        FacePicker.OnMarkingSelect += args => OnFaceSelected!(args);
        FacePicker.OnColorChanged += args => OnFaceColorChanged!(args);
        FacePicker.OnSlotRemove += args => OnFaceSlotRemoved!(args);
        FacePicker.OnSlotAdd += delegate { OnFaceSlotAdded!(); };

        HeadPicker.OnMarkingSelect += args => OnHeadSelected!(args);
        HeadPicker.OnColorChanged += args => OnHeadColorChanged!(args);
        HeadPicker.OnSlotRemove += args => OnHeadSlotRemoved!(args);
        HeadPicker.OnSlotAdd += delegate { OnHeadSlotAdded!(); };

        HeadTopPicker.OnMarkingSelect += args => OnHeadTopSelected!(args);
        HeadTopPicker.OnColorChanged += args => OnHeadTopColorChanged!(args);
        HeadTopPicker.OnSlotRemove += args => OnHeadTopSlotRemoved!(args);
        HeadTopPicker.OnSlotAdd += delegate { OnHeadTopSlotAdded!(); };

        HeadSidePicker.OnMarkingSelect += args => OnHeadSideSelected!(args);
        HeadSidePicker.OnColorChanged += args => OnHeadSideColorChanged!(args);
        HeadSidePicker.OnSlotRemove += args => OnHeadSideSlotRemoved!(args);
        HeadSidePicker.OnSlotAdd += delegate { OnHeadSideSlotAdded!(); };

        OverlayPicker.OnMarkingSelect += args => OnOverlaySelected!(args);
        OverlayPicker.OnColorChanged += args => OnOverlayColorChanged!(args);
        OverlayPicker.OnSlotRemove += args => OnOverlaySlotRemoved!(args);
        OverlayPicker.OnSlotAdd += delegate { OnOverlaySlotAdded!(); };
    }

    public void UpdateState(DionaMirrorUiState state)
    {
        FacePicker.UpdateData(state.Face, state.Species, state.FaceSlotTotal);
        HeadPicker.UpdateData(state.Head, state.Species, state.HeadSlotTotal);
        HeadTopPicker.UpdateData(state.HeadTop, state.Species, state.HeadTopSlotTotal);
        HeadSidePicker.UpdateData(state.HeadSide, state.Species, state.HeadSideSlotTotal);
        OverlayPicker.UpdateData(state.Overlay, state.Species, state.OverlaySlotTotal);
        /*
         *if (!HairPicker.Visible && !FacialHairPicker.Visible)
         *         {
         *             AddChild(new Label { Text = Loc.GetString("magic-mirror-component-activate-user-has-no-hair") });
         *         }
         *
         */

    }
}
